====================

 N.T.E.  principles

====================

N.B.: moved out from nte.js actually this is a little bit obsolete
      ------------------------------------------------------------


--- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< ---


21.9.2018 second conjecture

When we start with:

	<input type="text" id="TL_A4PM_2DaysW" Placeholder="...">

we end to complicate things with:

	<input type="text" id="TL_A4PM_2DaysW" Placeholder="..." SubType="money" ... >

or

	<money id="TL_A4PM_2DaysW" Placeholder="..." min="..." max="..." ...></money>

What if we keep it KISS:

	<input id="TL_A4PM_2DaysW">

and into a form.js:

	...
	TL_A4PM_2DaysW: {
		type: "money",
		placeholder: "....",
		min: "...",
		max: "...",
		...
	}

In the old way of CASE, we can complete and/or transform each other to obtain a "normalized" form in any moment.

So as CSS is a mirror of HTML for the representation aspect, JSON become a mirror for the behaviour aspect.

Can be this an application of OOAD concepts? 

But what appen if tomorrow the IETF define a new standard where extra attributes change meaning?

Do we really need some "ng-", "v-" or "data-" prefix to keep us safe? No, because the meaning is detached!

Was this the pourpuse of the OOP? Data + Process = meaning? Is this really useful and practical?


--- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< ---


5.7.2018 first draft

NTE (in the future ITE (intuitive template engine)) want hide complexity without obly
the developer to learn ng-* data-* $scope, or other particular names or paradigm.

Life motive: "deduct the bonds from the names and behavior from the types".

We like examples as 

	<input value="@myVariableName">.
	<p>My name is @myVariableName</p>.

But a more complex example require a lebel than can be:

	label:<input....>

or

	<label><input ...>label</label>

depending on UI

So a common tag can be:

	<input value="@myVarName" label="label:">

that require a input(node) function or a <template name="input">... to be rendered into one or other form.
Same as <p> require a p(node) to be rendered as <p>My name is <span>@MyVarName</span></p>.

But when the complexity evolve to 3rd level, things must be grouped and named:

== presentation layer ============================

<!-- 
	attributes not allowed, because this can be rendered both client or server side
	depending on how we want balance performances
-->

<person>
	<fName></fname>
	<lName></lname>
	<bDay><bDay>
	<fullName></fullName>
	<splitNames></splitNames>
	<save></save>
</person>

<persons></persons>

<script>
	
	var person = {
		fName: "?",
		lName: "Zaglio",
		bDay: "1972-02-01",
		...
		// functions will wrapped and param names used to link controls to update
		fullName: function(fName,lName) = { return fName+" "+lName},
		splitNames: function(fName,lName) { split into fName,lName },
		save: function() { ajax calls }
	}

	var persons = []

	nte.viewComponents(
		{
			// maybe an external JSON managed by UI console/gui
			person: {
				lName: {
					template: "input",
					label: "Last name"
				},
				save: {
					class:"btn btn-default"
				},
			},

			persons: {
				template: "table"
			}

		}
	)
	
	person.fName="Stefano"
	// person.viewUpdate() -->automatically generated&called 1st time by engine

</script>


== local components layer =========================

<template name="fName>
	<input label="First Name" value="@fName">
</template>

<template name="bDay>
	<input label="Birthday" type="date" value="@bDay">
</template>

<template name="fullName">
	Full name:@fullName
</template>

<template name="save">
	<button></button>
</template>


== global component layer =========================

<template name="input">
	@label:<input value="@value" type="@type|text">
</template>


== engine =========================================

nte.input = function(node,data) {
	...
	node.addEventListener("change",function(ev){
		eval(node.getAttribute("value") +"='" + ev.value + "'")
	}
	...
}



--- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< --- 8< ---


